---
title: Homework 7 - Creating a resume database
author: Rachel Farzan
date: 11/12/23
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document contains many aspects of a database containing information about a company's employees that can be used to construct resumes. These aspects include an ER diagram of the database, sample data, and sample queries. This is done by connecting to a database via PHPMyAdmin.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-kronou>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

In this project, I have designed a database that stores employee data in order to construct resumes. The entities for this database are people, skills, and roles, with 2 additional tables to create many-to-many relationships. I've constructed an ER diagram, built the database in a sql file, filled the database with sample data, and accessed the sql file to ask my database queries.

## Crows-foot diagram

This is an ER diagram showing the relationships between the entities of the database. I included the tables representing the many-to-many relationships of the database, as they include other attributes besides the primary and foreign keys.

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE ||--o| PEOPLESKILLS : has
    PEOPLESKILLS |o--|| SKILLS : has
    PEOPLE ||--|| PEOPLEROLES : has
    PEOPLEROLES ||--|| ROLES : has
    PEOPLE{
        int id PK
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }
    SKILLS {
        int id PK
        string name
        string description
        string tag
        string url
        int time_commitment
    }
    ROLES {
        int id PK
        string name
        int sort_priority
    }
    PEOPLESKILLS {
        int id PK
        int people_id FK
        int skills_id FK
        date date_aquired
    }
    PEOPLEROLES {
        int id PK
        int people_id FK
        int role_id FK
        date date_aquired
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe every employee's first and last name, email, linkedin url, headshot url, discord handle, brief bio, and date joined. The only required information are last name, and date joined. However, date joined will default to today's date if a date isn't provided. 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list people table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe every skill listed in the database with its name, description, tag, url, and time_commitment. Name, description, and tag are required fields. Tag is a string that can be used to sort the skills, and time commitment is how long it may take someone to learn this skill (in minutes). 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list skills table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the roles at the company with each one's name and sort priority, which are required fields. Sort priority is an int that can be used to sort the roles. 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

```{python}
sql = f"""
SELECT name, tag, description
    FROM skills
    ORDER BY name asc
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
sql = f"""
SELECT first_name, last_name, email
    FROM people
    ORDER BY ABS(last_name)
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1

```{python}
sql = f"""
SELECT name
    FROM people INNER JOIN peopleskills ON people.id = peopleskills.people_id
    INNER JOIN skills ON peopleskills.skills_id = skills.id
    WHERE people.last_name = "Person 1"
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6

```{python}
sql = f"""
SELECT first_name, last_name
    FROM people INNER JOIN peopleskills ON people.id = peopleskills.people_id
    INNER JOIN skills ON peopleskills.skills_id = skills.id
    WHERE skills.tag = "Skill 6"
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
sql = f"""
SELECT first_name, last_name
    FROM people INNER JOIN peopleroles ON people.id = peopleroles.people_id
    INNER JOIN roles ON peopleroles.role_id = roles.id
    WHERE roles.name = "Developer"
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
sql = f"""
SELECT first_name, last_name, email
    FROM (peopleskills RIGHT JOIN people ON peopleskills.people_id = people.id)
    WHERE peopleskills.people_id is NULL
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills

```{python}
sql = f"""
SELECT name, tag
    FROM (peopleskills RIGHT JOIN skills ON peopleskills.skills_id = skills.id)
    WHERE peopleskills.skills_id is NULL
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role

```{python}
sql = f"""
SELECT first_name, last_name, skills.name
    FROM people INNER JOIN peopleskills ON people.id = peopleskills.people_id INNER JOIN skills ON peopleskills.skills_id = skills.id INNER JOIN peopleroles ON people.id = peopleroles.people_id INNER JOIN roles ON peopleroles.role_id = roles.id
    WHERE roles.name = "Boss"
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles

```{python}
sql = f"""
SELECT roles.id, name
    FROM roles LEFT JOIN peopleroles ON roles.id = peopleroles.role_id
    WHERE peopleroles.role_id is NULL
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Reflection

I actually enjoyed this assignment. Writing an entire database from scratch definitely helped me learn more about how to write in SQL. I feel a lot more confident going into the final project now. It was also satasfying to actually build the whole thing, as opposed to just looking at a database or asking it queries. At some points, it was frustrating figuring out why I was getting errors, though I felt like I learned a lot from the process. It was also fun to write silly data!